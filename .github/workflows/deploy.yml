---
name: Deploy Action

on:
  workflow_call:
    inputs:
      #branch:
      #  required: true
      #  type: string
      namespace:
        required: true
        type: string
      user_name:
        required: false
        default: spsh-bot
        type: string
      dbildungs_iam_server_branch:
        required: true
        description: "Has to be main or in format <project>-<ticketnumber>, e.g. spsh-130"
        default: main
        type: string
      dbildungs_iam_client_branch:
        required: true
        description: "Has to be main or in format <project>-<ticketnumber>, e.g. spsh-130"
        default: main
        type: string
      dbildungs_iam_keycloak_branch:
        required: true
        description: "Has to be main or in format <project>-<ticketnumber>, e.g. spsh-130"
        default: main
        type: string
    secrets:
      SPSH_DEV_KUBECONFIG:
        required: true
permissions:
  contents: read

jobs:     
  deployment:
    runs-on: 'ubuntu-latest'
    env:
      GITHUB_TOKEN: ${{ github.token }}
      KUBECONFIG_FILE: '${{ secrets.SPSH_DEV_KUBECONFIG }}'
    steps:
      - name: Search dbildungs-iam-server and get Helm Chart release by ticket name with releaseNameRegEx action
        if: ${{ github.ref_name != 'main' }}
        id: getByReleaseNameRegEx
        uses: cardinalby/git-get-release-action@1.2.4
        with:
          releaseNameRegEx: "dbildungs-iam-0.0.0-${{ inputs.dbildungs_iam_server_branch }}"
          doNotFailIfNotFound: 'true'
          repo: 'dBildungsplattform/helm-charts-registry'

      - name: Set Branch Helm Chart tagname as variable for dbildungs-iam-server
        if: ${{ steps.getByReleaseNameRegEx.outputs.tag_name != '' && github.ref_name != 'main' }}
        run: |
          echo "${{ steps.getByReleaseNameRegEx.outputs.tag_name }}"
          echo "dbildungs_iam_server_tagname=${{ steps.getByReleaseNameRegEx.outputs.tag_name }}" >> $GITHUB_ENV

      - name: Check if a Branch Helm Chart was found, if not, take last from main
        if: ${{ steps.getByReleaseNameRegEx.outputs.tag_name == '' || github.ref_name == 'main'  }}
        id: getMainByReleaseNameRegEx
        uses: cardinalby/git-get-release-action@1.2.4
        with:
          releaseNameRegEx: 'dbildungs-iam-0.0.1'
          doNotFailIfNotFound: 'true'
          repo: 'dBildungsplattform/helm-charts-registry'
      
      - name:  Exit if latest main helm-chart is not found 
        if: steps.getMainByReleaseNameRegEx.outputs.tag_name == '' && steps.getByReleaseNameRegEx.outputs.tag_name == ''
        run: |
          echo No dbildungs-iam-server Helm Chart is not found, exit 
          exit 1

      - name:  Set Helm Chart tagname as variable for dbildungs-iam-server, last from main
        if: steps.getByReleaseNameRegEx.outputs.tag_name == '' 
        run: |
          echo "${{ steps.getMainByReleaseNameRegEx.outputs.tag_name }}"
          echo "dbildungs_iam_server_tagname=${{ steps.getMainByReleaseNameRegEx.outputs.tag_name }}" >> $GITHUB_ENV

      - name: Set up kubectl and Helm
        uses: azure/setup-kubectl@v3

      - name: Configure kubeconfig as tmp file
        run: |
          echo "${{ secrets.SPSH_DEV_KUBECONFIG }}" > kubeconfig
          export KUBECONFIG=$(pwd)/kubeconfig

      - name: Create Kubernetes namespace
        run: |
          kubectl create namespace ${{ inputs.namespace }} --kubeconfig $(pwd)/kubeconfig || true

      - name: Download dbildungs_iam_server Helm chart
        run: |
          wget https://github.com/dBildungsplattform/helm-charts-registry/releases/download/$dbildungs_iam_server_tagname/$dbildungs_iam_server_tagname.tgz
          tar -zxvf $dbildungs_iam_server_tagname.tgz

      - name: Deploy dbildungs_iam_server Helm chart
        run: |
          helm upgrade --install \
            dbildungs-iam \
            dbildungs-iam \
            --namespace ${{ inputs.namespace }} \
            --kubeconfig $(pwd)/kubeconfig \
            --set backendHostname=${{ inputs.namespace }}.dev.spsh.dbildungsplattform.de